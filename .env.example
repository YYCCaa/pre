# .env.example (Project Root - Production Template)
# ===================================================
# Edge AI Tracking System - Production Template
# ===================================================
# Copy this file to .env and update with your values
# NEVER commit .env to version control!

# Project Information
PROJECT_NAME=edge-ai-tracking
PROJECT_VERSION=1.0.0
ENVIRONMENT=production

# =================================================
# BACKEND CONFIGURATION
# =================================================

# Application Settings
BACKEND_PORT=3001
BACKEND_HOST=0.0.0.0
NODE_ENV=production

# Database Configuration (REQUIRED)
DB_HOST=your-database-host.com
DB_PORT=5432
DB_USERNAME=your-db-username
DB_PASSWORD=your-secure-db-password
DB_NAME=edge_ai_tracking
DB_SYNC=false
DB_LOGGING=false
DB_SSL=true

# JWT Authentication (REQUIRED - CHANGE THESE!)
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long-change-this
JWT_EXPIRES_IN=24h
JWT_REFRESH_SECRET=your-refresh-secret-key-minimum-32-characters-long-change-this
JWT_REFRESH_EXPIRES_IN=7d

# MQTT Configuration (REQUIRED)
MQTT_BROKER_URL=mqtt://your-mqtt-broker.com:1883
MQTT_CLIENT_ID=edge-ai-backend-prod
MQTT_USERNAME=your-mqtt-username
MQTT_PASSWORD=your-mqtt-password
MQTT_KEEP_ALIVE=60
MQTT_CLEAN_SESSION=true

# Redis Configuration (Optional but recommended)
REDIS_HOST=your-redis-host.com
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password
REDIS_DB=0

# CORS Settings (REQUIRED)
CORS_ORIGIN=https://yourdomain.com
CORS_CREDENTIALS=true

# Rate Limiting (Adjust for production load)
RATE_LIMIT_TTL=60
RATE_LIMIT_LIMIT=100

# File Upload
MAX_FILE_SIZE=5242880
UPLOAD_DEST=/app/uploads

# Logging (Production settings)
LOG_LEVEL=warn
LOG_FILE=/var/log/edge-ai/app.log
LOG_MAX_SIZE=50m
LOG_MAX_FILES=10

# API Documentation (Disable in production)
SWAGGER_ENABLED=false
SWAGGER_PATH=api/docs
SWAGGER_TITLE=Edge AI Tracking API
SWAGGER_DESCRIPTION=Real-time Edge-AI Object Tracking & Analytics API

# Health Check
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_TIMEOUT=5000
HEALTH_CHECK_PATH=/health

# =================================================
# FRONTEND CONFIGURATION
# =================================================

# Frontend Application
FRONTEND_PORT=3000
FRONTEND_HOST=0.0.0.0

# API Configuration (REQUIRED)
NEXT_PUBLIC_API_URL=https://api.yourdomain.com/api
NEXT_PUBLIC_SOCKET_URL=https://api.yourdomain.com

# Application Settings
NEXT_PUBLIC_APP_NAME=Edge AI Tracker
NEXT_PUBLIC_APP_VERSION=1.0.0
NEXT_PUBLIC_APP_DESCRIPTION=Real-time Edge-AI Object Tracking & Analytics

# Feature Flags (Configure as needed)
NEXT_PUBLIC_ENABLE_ANALYTICS=true
NEXT_PUBLIC_ENABLE_REAL_TIME=true
NEXT_PUBLIC_ENABLE_DEVICE_MANAGEMENT=true
NEXT_PUBLIC_ENABLE_USER_PROFILES=true
NEXT_PUBLIC_ENABLE_NOTIFICATIONS=true

# UI Configuration
NEXT_PUBLIC_THEME=light
NEXT_PUBLIC_SIDEBAR_COLLAPSED=false
NEXT_PUBLIC_CHART_THEME=blue
NEXT_PUBLIC_DEFAULT_PAGE_SIZE=20

# Development Tools (Disable in production)
NEXT_PUBLIC_DEBUG_MODE=false
NEXT_PUBLIC_MOCK_DATA=false
NEXT_PUBLIC_SHOW_GRID=false

# Chart & Dashboard Settings (Optimize for production)
NEXT_PUBLIC_CHART_REFRESH_INTERVAL=10000
NEXT_PUBLIC_EVENT_FETCH_LIMIT=50
NEXT_PUBLIC_DASHBOARD_AUTO_REFRESH=true

# WebSocket Configuration (Production optimized)
NEXT_PUBLIC_WS_RECONNECT_ATTEMPTS=3
NEXT_PUBLIC_WS_RECONNECT_DELAY=5000
NEXT_PUBLIC_WS_TIMEOUT=15000

# =================================================
# DOCKER & INFRASTRUCTURE
# =================================================

# Docker Compose Settings
COMPOSE_PROJECT_NAME=edge-ai-tracking
COMPOSE_FILE=docker-compose.prod.yml

# PostgreSQL (Production)
POSTGRES_VERSION=15
POSTGRES_USER=your-db-username
POSTGRES_PASSWORD=your-secure-db-password
POSTGRES_DB=edge_ai_tracking

# Redis (Production)
REDIS_VERSION=7-alpine

# MQTT Broker (Production)
MOSQUITTO_VERSION=2
MOSQUITTO_CONFIG=./mosquitto.prod.conf

# =================================================
# MONITORING & ANALYTICS
# =================================================

# Application Monitoring (Recommended for production)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# NEW_RELIC_LICENSE_KEY=your-new-relic-license-key

# Analytics (Optional)
# GOOGLE_ANALYTICS_ID=GA_TRACKING_ID
# MIXPANEL_TOKEN=your-mixpanel-token

# Error Tracking
# BUGSNAG_API_KEY=your-bugsnag-key
# ROLLBAR_ACCESS_TOKEN=your-rollbar-token

# Performance Monitoring
# DATADOG_API_KEY=your-datadog-key
# ELASTIC_APM_SERVER_URL=your-elastic-apm-url

# =================================================
# SSL & SECURITY
# =================================================

# SSL Configuration (If handling SSL at app level)
# SSL_CERT_PATH=/path/to/certificate.crt
# SSL_KEY_PATH=/path/to/private.key
# SSL_CA_PATH=/path/to/ca-certificate.crt

# Security Headers
# HELMET_ENABLED=true
# CSP_ENABLED=true

# =================================================
# BACKUP & MAINTENANCE
# =================================================

# Database Backup
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE=0 2 * * *
# BACKUP_RETENTION_DAYS=30
# BACKUP_S3_BUCKET=your-backup-bucket

# Maintenance Mode
# MAINTENANCE_MODE=false
# MAINTENANCE_MESSAGE=System under maintenance

# =================================================
# THIRD-PARTY SERVICES
# =================================================

# Email Service (For notifications)
# SMTP_HOST=smtp.your-provider.com
# SMTP_PORT=587
# SMTP_USER=your-smtp-username
# SMTP_PASS=your-smtp-password
# SMTP_FROM=noreply@yourdomain.com

# Cloud Storage (For file uploads)
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-s3-bucket

# Push Notifications
# FCM_SERVER_KEY=your-fcm-server-key
# VAPID_PUBLIC_KEY=your-vapid-public-key
# VAPID_PRIVATE_KEY=your-vapid-private-key

# =================================================
# NOTES
# =================================================
# 
# 1. Generate secure JWT secrets:
#    node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#
# 2. For production, consider using environment-specific files:
#    - .env.production
#    - .env.staging
#    - .env.development
#
# 3. Use a secret management service in production:
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - Google Secret Manager
#    - HashiCorp Vault
#
# 4. Always use HTTPS in production
#
# 5. Regularly rotate secrets and passwords
#
# 6. Monitor your environment variables for security
#